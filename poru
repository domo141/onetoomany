#!/bin/sh
#
# $ poru -- podman run wrapper $
#
# Author: Tomi Ollila -- too Ã¤t iki piste fi
#
#	Copyright (c) 2019 Tomi Ollila
#	    All rights reserved
#
# Created: Sat 06 Jul 2019 14:03:52 EEST too
# Last modified: Sat 15 Jul 2023 00:19:12 +0300 too

# SPDX-License-Identifier: BSD 2-Clause "Simplified" License

case ${BASH_VERSION-} in *.*) set -o posix; shopt -s xpg_echo; esac
case ${ZSH_VERSION-} in *.*) emulate ksh; esac

set -euf  # hint: sh -x thisfile [args] to trace execution

die () { printf '%s\n' "$@"; exit 1; } >&2

x () { printf '+ %s\n' "$*" >&2; "$@"; }
x_exec () { printf '+ %s\n' "$*" >&2; exec "$@"; die "exec '$*' failed"; }

test "${1-}" = g && { wo=true; shift; } || wo=false

run ()
{
	if test $# = 2 && test "$2" = . -o "$2" = ..
	then
		test $2 = . && set -- "$1" /bin/bash || set -- "$1" /bin/zsh
	fi
	case $PWD in $HOME*) xv= ;; *) xv=$PWD:$PWD ;; esac
	if $wo
	then wo="-v /etc/localtime:/etc/localtime:ro --device /dev/dri"
	     test "${DISPLAY-}" && {
		wo="$wo -v /tmp/.X11-unix:/tmp/.X11-unix"
		wo="$wo -e DISPLAY=$DISPLAY"
	     }
	     test "${WAYLAND_DISPLAY-}" && {
		wo="$wo -v /run/user/`id -u`/bus:/tmp/bus"
		wo="$wo -e DBUS_SESSION_BUS_ADDRESS=unix:path=/tmp/bus"
		wo="$wo -e XDG_RUNTIME_DIR=/tmp"
		wo="$wo -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/wayland-0"
		wo="$wo -e WAYLAND_DISPLAY=/tmp/wayland-0"
	     }
	     wo="$wo --security-opt label=type:container_runtime_t"
	else wo=
	fi
	x_exec podman run --pull=never --rm -it --privileged $wo \
		--tmpfs /tmp --tmpfs /run \
		-v "$HOME:$HOME" ${xv:+ -v "$xv"} -w "$PWD" "$@"
	exit not reached
}

case ${1-}
in '')
	exec >&2; echo
	echo "Usage: ${0##*/} [g] [podman run options] or helper command"
	echo "  often just 'image' arg is enough to be given"
	echo "  'g' as first arg: run options for graphical clients added"
	echo '  helper commands:  r  i ia  l la  ps psa  e  mvtag  push and rmi'
	echo '  also, the following podman(1) commands are passed through:'
	echo '       tag  rm  history  inspect  pull  run  start  exec  stop'
	echo; exit 1

;; r | i | l | ia | la | ps | psa | e | mvtag | push | rmi )
	cmd=$1

;; tag | rm | history | inspect | pull | run | start | exec | stop )
	x_exec podman "$@"

;; -* | ??*:*? ) run "$@"

# no command, no options or no name:tag -- images for user convenience...
;; [1-9] | [1-9][0-9] | [1-9][0-9][0-9] )
	echo "Newest $1 images:"
	cmd=i; set -- i $1
;; *)	echo "Images matching '$1':"
	cmd=i; set -- i $1
esac

pi_f=
_images () {
	f=$1; s=$2 shift 2
	# retrofitted --sort=... (2021-12-14)
	case ${1-} in --sort=*) pi_f=${pi_f:+$pi_f }$1; shift; esac
	pi_f='podman images '$pi_f' --format'
	#case ${1-} in	'')   exec $pi_f "$f"
	case ${1-} in	'')   $pi_f "$f" | sed -n ${s:+-e "$s"} -e p
	;; [1-9]|[1-9][0-9])  $pi_f "$f" | sed ${s:+-e "$s"} -e $1q
	;; [1-9][0-9][0-9])   $pi_f "$f" | sed ${s:+-e "$s"} -e $1q
	;;		*)    $pi_f "$f" | sed -n ${s:+-e "$s"} -e "\\| .*$1|p"
	esac
	echo
}

cmd_r ()
{
	test $# != 0 || die "Usage: ${0##*/} r image-re [podman run args]"
	case $1 in *'|'*) die "'|' in '$1'"; esac
	#image=`podman images --format='{{$e:=""}}{{range $e = split .Repository "/"}}{{end}}{{$e}}:{{.Tag}}' --noheading --filter=reference="$1" | sed q`
	#image=`podman images --format='{{$e:=""}}{{range $e = split .Repository "/"}}{{end}}{{$e}}:{{.Tag}}' --noheading | sed -n "\\|$1|{p;q;}"`
	image=`podman images --format='{{.Repository}}//{{.Tag}}' --noheading | sed -n -e 's|.*/\(.*\)//|\1:|' -e "\\|$1|{p;q;}"`
	test "$image" || die "No image match for '$1'"
	shift
	run $image "$@"
}

cmd_i ()
{
	# note: before podman 1.8.1 .Created worked instead of .CreatedSince
	# also: some older systems cannot handle $e = ... in the template
	echo ' IMAGE ID        CREATED      SIZE    REPOSITORY:TAG'
	#_images '{{.ID}} {{printf "%12.12s %8s" .CreatedSince .Size}} {{$e:=""}}{{range $e = split .Repository "/"}}{{end}}{{$e}}:{{.Tag}}' "$@"
	_images '{{.ID}}  {{printf "%12.12s %8s" .CreatedSince .Size}} //{{.Repository}}//{{.Tag}}' 's|//.*/\(.*\)//| \1:|' "$@"
}

cmd_l ()
{
	echo ' IMAGE ID       REPOSITORY:TAG'
	_images '{{.ID}}  {{.Repository}}:{{.Tag}}' '' "$@"
}

cmd_ia () { pi_f='-a'; cmd_i "$@"; }
cmd_la () { pi_f='-a'; cmd_l "$@"; }

_ps ()
{
	a=$1 #; shift
	echo 'CONTAINER ID   IMAGE                        STATUS                NAME(S)'
	#exec podman ps --format='{{.ID}}  {{$e:=""}}{{range $e = split .Image "/"}}{{end}}{{printf "%-18.18s %-20.20s" $e .Status}}  {{.Names}}'
	podman ps $a --format='{{.ID}}  {{.Image}}  {{.Status}}  {{.Names}}' \
		| awk -F '  ' '{ sub(".*/", "~", $2)
		printf "%s  %-28.28s %-20.20s  %s\n", $1, $2, $3, $4 }'
	echo
}

cmd_ps ()
{
	_ps '' # "$@"
}

cmd_psa ()
{
	_ps -a # "$@"
}

cmd_e ()
{
	case $#${2-}	in 2.) set -- "$1" /bin/bash
			;; 2..) set -- "$1" /bin/zsh
	esac
	x_exec podman exec -it -w "$PWD" "$@"
}

cmd_push ()
{
	test $# -ge 2 || die "Usage: ${0##*/} $cmd [opts] image destination[/]"
	eval la=\$$#
	# does last arg end in '/'?
	case $la in */)
		a1=$1 a2=$2; shift 2
		for arg
		do
			shift
			set -- "$@" $a1
			a1=$a2; a2=$arg
		done
		set -- "$@" $a1 $a2$a1
	esac
	x_exec podman push "$@"
}

cmd_rmi ()
{
	test $# != 0 || die "Usage: ${0##*/} $cmd image [image...]"
	for arg; do
		case $arg in *-rmi-[1-9]) continue; esac
		for i in 1 2 3 4 5 6 7 8 9
		do	id=`podman images -q "$arg-rmi-$i"`
			test -z "$id" || { echo $id $arg-rmi-$i; continue; }
			x podman tag "$arg" "$arg-rmi-$i"
			i=
			break
		done
		test -z "$i" || die "'$arg': all backups in use..."
	done
	x_exec podman rmi "$@"
}

cmd_mvtag ()
{
	test $# = 2 || die "Usage: ${0##*/} $cmd from-image to-image"
	case `podman images -q "$2"` in '') ;; *)
		podman images "$2"
		echo "image '$2' exists"
		exit 1
	esac
	x podman tag "$1" "$2"
	id1=`podman images -q "$1"`
	id2=`podman images -q "$2"`
	x test "${id1:-1}" = "${id2:-2}"
	x_exec podman rmi "$1"
}

shift
cmd_$cmd "$@"


# Local variables:
# mode: shell-script
# sh-basic-offset: 8
# tab-width: 8
# End:
# vi: set sw=8 ts=8
